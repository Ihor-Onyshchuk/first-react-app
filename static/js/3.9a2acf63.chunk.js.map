{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","item","message","lukas","likes","MyPosts","memo","console","log","postsElements","posts","map","p","likesCount","postsBlock","AddPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","MyPostsContainer","profilePage","dispatch","addPostCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.9a2acf63.chunk.js","sourcesContent":["import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsForRedirect = state => ({\n  isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = Component => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isAuth) {\n        return <Redirect to={\"/login\"} />;\n      }\n      return <Component {...this.props} />;\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n\n  return ConnectedAuthRedirectComponent;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__R6Jlo\",\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1d730\",\"lukas\":\"Post_lukas__2e4k0\"};","import React, { useState, useEffect } from \"react\";\n\nconst ProfileStatusWithHooks = props => {\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusCange = e => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <span onDoubleClick={activateEditMode}>\n            {props.status || \"--------\"}\n          </span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onChange={onStatusCange}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large} />\r\n        ava + description\r\n      </div>\r\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTtBUS57ZC6zv8XSL0kTRugyKd56ZAYBNFHAkY1iOWdFrkbrkLs\"></img>\r\n      {props.message}\r\n      <div>\r\n        <span>Lukas: <span className={s.lukas}>{props.likes}</span></span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Posts/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  required,\r\n  maxLengthCreator\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/formsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo(props => {\r\n  console.log(\"render yo\");\r\n  let postsElements = props.posts.map(p => (\r\n    <Post message={p.message} likes={p.likesCount} />\r\n  ));\r\n\r\n  let addNewPost = values => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostFormRedux onSubmit={addNewPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name={\"newPostText\"}\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>AddPost</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(\r\n  AddNewPostForm\r\n);\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { addPostCreator } from \"../../../redux/profile-reducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addPost: newPostText => {\r\n      dispatch(addPostCreator(newPostText));\r\n    }\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = props => {\r\n  return (\r\n    <div className=\"app-wrapper-content\">\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile\r\n          {...this.props}\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateStatus={this.props.updateStatus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n  // withAuthRedirect,\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}